(define nil (quote ()))
(define True #t)
(define False #f)

(define (equal? l1 l2)
  (or (eq? l1 l2)
      (and (and (pair? l1) (pair? l2))
           (equal? (car l1) (car l2))
           (equal? (cdr l1) (cdr l2)))))

;;表达式解析
(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (aguend s) 
  (if (= (length (cddr s)) 1)
      (caddr s)
      (cons '+ (cddr s))))
(define (minus? x)
  (and (pair? x) (eq? (car x) '-) (= length(x) 2)))
(define (sub? x)
  (and (pair? x) (eq? (car x) '-) (= length(x) 3)))
(define (minuend x) (cadr x))
(define (subtractor  x) (caddr x))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (if (= (length (cddr p)) 1)
      (caddr p)
      (cons '* (cddr p))))

(define (division? exp)
  (and (pair? exp) (eq? (car exp) '/)))
(define (dividend exp) (cadr exp))
(define (divisor exp) (caddr exp))

(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) '**)))
(define (base-of-exponent exp) (cadr exp))
(define (exponent exp) (caddr exp))

(define (logarithm? exp)
  (and (pair? exp) 
       (or (eq? (car exp) 'ln)
           (eq? (car exp) 'lg)
           (eq? (car exp) 'log))))
(define (base-of-log exp)
  (cond ((eq? (car exp) 'ln) 'e)
        ((eq? (car exp) 'lg) 10)
        ((eq? (car exp) 'log) (cadr exp))))
(define (logarithm-of-log exp)
  (cond ((eq? (car exp) 'ln) (cadr exp))
        ((eq? (car exp) 'lg) (cadr exp))
        ((eq? (car exp) 'log) (caddr exp))))

;;生成表达式
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-minus a)
  (cond ((number? a) (- a))
        (else (list '- a))))
(define (make-sub a1 a2)
  (cond ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (- a1 a2))
        ((=number? a1 0) (make-minus a2))
        (else (list '- a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
	((=number? m1 1) m2)
	((=number? m2 1) m1)
	((and (number? m1) (number? m2)) (* m1 m2))
	(else (list '* m1 m2))))
(define (make-division dividend divisor)
  (cond ((=number? dividend 0) 0)
        ((and (number? divisor) (number? dividend)) (/ dividend divisor))
        ((=number? divisor 1) dividend)
        (else (list '/ dividend divisor))))
(define (make-logarithm base logged-exp) 
  (cond ((=number? logged-exp 1) 0)
        ((eq? base logged-exp) 1) 
        (else (list 'log base logged-exp))))
(define (make-exponentiation base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        ((=number? base 0) 0)
        ((=number? base 1) 1)
        ((and (number? base) (number? exponent)) (expt base exponent))
        (else (list '** base exponent))))



(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var ) 1 0))
        ((sum? exp)
	  (make-sum (deriv (addend exp) var)
	            (deriv (aguend exp) var)))
        ((minus? exp) (make-minus (deriv exp var)))
        ((sub? exp)
           (make-sub (deriv (minuend exp) var)
                     (deriv (subtractor exp) var)))
        ((product? exp)
	  (make-sum 
	    (make-product (deriv (multiplier exp) var) (multiplicand exp))
	    (make-product (multiplier exp) (deriv (multiplicand exp) var))))
	((exponentiation? exp)
          (make-sum 
	    (make-product
	      (make-product (exponent exp) 
		   	  (make-exponentiation (base-of-exponent exp) (make-sub (exponent exp) 1)))
	      (deriv (base-of-exponent exp) var))
            (make-product
              (make-product
                (make-exponentiation (base-of-exponent exp) (exponent exp))
                (make-logarithm 'e (base-of-exponent exp)))
              (deriv (exponent exp) var))))
        ((logarithm? exp)
           (make-division 
             (deriv (logarithm-of-log exp) var)
             (make-product 
               (logarithm-of-log exp)
               (make-logarithm 'e (base-of-log exp)))))           
	(else (error "Unknow expression type --DERIV") exp)))

