(define (generate-account-id)
  (let ((s (make-serializer)))
    (define (counter)
      (let ((i 0))
        (lambda ()
          (set! i (+ i 1))
          i)))
    (s sounter)))

(define (make-account balance)
  (let ((account-id (generate-account-id)))   
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (let ((serializer (make-serializer)))
      (define (dispatch m)
        (cond
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          ((eq? m 'balance) balance)
          ((eq? m 'serializer) serializer)
          ((eq? m 'id) account-id)                                
          (else (error "Unknown request -- MAKE-ACCOUNT" m))))
      dispatch)))

(define (serailized-exchange account1 account2)
  (let ((s1 (account1 'serializer))
        (s2 (account2 'serializer))
        (id1 (account1 'id))
        (id2 (account2 'id)))
    (cond ((< id1 id2)
           ((s1 (s2 exchange)) account1 account2))
          ((> id1 id2)
           ((s2 (s1 exchange)) account1 account2)))))